{
  "openrpc": "1.0.0-rc1",
  "info": {
    "version": "1.0.0",
    "title": "XRP JSON-RPC",
    "description": "This API lets you interact with a rippled server via JSON-RPC"
  },
  "servers": [
    {
      "name": "Ripple testnet",
      "url": "https://s.devnet.rippletest.net"
    }
  ],
  "methods": [
    {
      "name": "account_channels",
      "description": "The account_channels method returns information about an account's Payment Channels. This includes only channels where the specified account is the channel's source, not the destination. (A channel's 'source' and 'owner' are the same.) All information retrieved is relative to a particular version of the ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "destination_account",
          "description": "The unique identifier of an account, typically the account's Address. If provided, filter results to payment channels whose destination is this account.",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "A list of payment channels where the account is the source of the channel.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_currencies",
      "description": "The account_currencies command retrieves a list of currencies that an account can send or receive, based on its trust lines. (This is not a thoroughly confirmed list, but it can be used to populate user interfaces.)",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        }
      ],
      "result": {
        "name": "result",
        "description": "A list of currencies that an account can send or receive.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_info",
      "description": "The account_info command retrieves information about an account, its activity, and its XRP balance. All information retrieved is relative to a particular version of the ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Queue"
        },
        {
          "name": "signer_lists",
          "description": "If true, and the MultiSign amendment is enabled, also returns any SignerList objects associated with this account.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        }
      ],
      "result": {
        "name": "result",
        "description": "Basic data about an account.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_lines",
      "description": "The account_lines method returns information about an account's trust lines, including balances in all non-XRP currencies and assets. All information retrieved is relative to a particular version of the ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "name": "peer",
          "description": "The Address of a second account. If provided, show only lines of trust connecting the two accounts.",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about an account's trust lines.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_objects",
      "description": "The account_objects command returns the raw ledger format for all objects owned by an account. For a higher-level view of an account's trust lines and balances, see the account_lines method instead.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "type",
          "description": "If included, filter results to include only this type of ledger object. The valid types are: check, deposit_preauth, escrow, offer, payment_channel, signer_list, ticket, and state (trust line).",
          "schema": {
            "type": "string",
            "enum": ["check", "deposit_preauth", "escrow", "offer", "payment_channel", "signer_list", "ticket", "state"]
          }
        },
        {
          "name": "deletion_blockers_only",
          "description": "If true, the response only includes objects that would block this account from being deleted. The default is false.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "All ledger objects owned by an account.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_offers",
      "description": "The account_offers method retrieves a list of offers made by a given account that are outstanding as of a particular ledger version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about an account's currency exchange offers.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_tx",
      "description": "The account_tx method retrieves a list of transactions that involved the specified account.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "ledger_index_min",
          "description": "Use to specify the earliest ledger to include transactions from. A value of -1 instructs the server to use the earliest validated ledger version available.",
          "schema": {
            "type": "integer",
            "minimum": -1
          }
        },
        {
          "name": "ledger_index_max",
          "description": "Use to specify the most recent ledger to include transactions from. A value of -1 instructs the server to use the most recent validated ledger version available.",
          "schema": {
            "type": "integer",
            "minimum": -1
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "name": "forward",
          "description": "Defaults to false. If set to true, returns values indexed with the oldest ledger first. Otherwise, the results are indexed with the newest ledger first.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about an account's transactions.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "gateway_balances",
      "description": "The gateway_balances command calculates the total balances issued by a given account, optionally excluding amounts held by operational addresses.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        },
        {
          "name": "hotwallet",
          "description": "An operational address to exclude from the balances issued, or an array of such addresses.",
          "schema": {
            "oneOf": [
              { "$ref": "#/components/schemas/Address"},
              { "type": "array", "items": {"$ref": "#/components/schemas/Address"} }
            ]
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "Total amounts issued by an account.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "noripple_check",
      "description": "The noripple_check command provides a quick way to check the status of the Default Ripple field for an account and the No Ripple flag of its trust lines, compared with the recommended settings.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "role",
          "required": true,
          "description": "Whether the address refers to a gateway or user. Recommendations depend on the role of the account. Issuers must have Default Ripple enabled and must disable No Ripple on all trust lines. Users should have Default Ripple disabled, and should enable No Ripple on all trust lines.",
          "schema": {
            "type": "string",
            "enum": ["gateway", "user"]
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Transactions"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "Recommended changes to an account's Default Ripple and No Ripple settings.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ledger",
      "description": "Retrieve information about the public ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "name": "full",
          "description": "Admin required. If true, return full information on the entire ledger. Ignored if you did not specify a ledger version. Defaults to false. (Equivalent to enabling transactions, accounts, and expand.) Caution: This is a very large amount of data -- on the order of several hundred megabytes!",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "accounts",
          "description": "Admin required. If true, return information on accounts in the ledger. Ignored if you did not specify a ledger version. Defaults to false. Caution: This returns a very large amount of data!",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Transactions"
        },
        {
          "name": "expand",
          "description": "Provide full JSON-formatted information for transaction/account information instead of only hashes. Defaults to false. Ignored unless you request transactions, accounts, or both.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "owner_funds",
          "description": "If true, include owner_funds field in the metadata of OfferCreate transactions in the response. Defaults to false. Ignored unless transactions are included and expand is true.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "$ref": "#/components/contentDescriptors/Queue"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about a ledger version.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ledger_closed",
      "description": "Get the latest closed ledger version.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "The unique identifiers of the most recently closed ledger.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ledger_current",
      "description": "Get the current working ledger version.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "The unique identifiers of the current in-progress ledger.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ledger_data",
      "description": "Get the raw contents of a ledger version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "Contents of the specified ledger.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ledger_entry",
      "description": "Get one element from a ledger version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "name": "index",
          "description": "Specify the object ID of a single object to retrieve from the ledger.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "account_root",
          "description": "Specify an AccountRoot object to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "name": "directory",
          "description": "Specify a DirectoryNode to retrieve. If a string, must be the object ID of the directory, as hexadecimal. If an object, requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
          "schema": {
            "oneOf": [
              { "$ref": "#/components/schemas/ObjectID" },
              { "$ref": "#/components/schemas/DirectoryNode" }
            ]
          }
        },
        {
          "name": "offer",
          "description": "Specify an Offer object to retrieve. If a string, interpret as the unique index to the Offer. If an object, requires the sub-fields account and seq to uniquely identify the offer.",
          "schema": {
            "oneOf": [
              { "$ref": "#/components/schemas/ObjectID" },
              { "$ref": "#/components/schemas/Offer" }
            ]
          }
        },
        {
          "name": "ripple_state",
          "description": "Object specifying the RippleState (trust line) object to retrieve. The accounts and currency sub-fields are required to uniquely specify the RippleState entry to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/RippleState"
          }
        },
        {
          "name": "check",
          "description": "Specify the object ID of a Check object to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "escrow",
          "description": "Specify an Escrow object to retrieve. If a string, must be the object ID of the Escrow, as hexadecimal. If an object, requires owner and seq sub-fields.",
          "schema": {
            "oneOf": [
              { "$ref": "#/components/schemas/ObjectID" },
              { "$ref": "#/components/schemas/Escrow" }
            ]
          }
        },
        {
          "name": "payment_channel",
          "description": "Specify the object ID of a PayChannel object to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "deposit_preauth",
          "description": "Specify a DepositPreauth object to retrieve. If a string, must be the object ID of the DepositPreauth object, as hexadecimal. If an object, requires owner and authorized sub-fields.",
          "schema": {
            "oneOf": [
              { "$ref": "#/components/schemas/ObjectID" },
              { "$ref": "#/components/schemas/DepositPreauth" }
            ]
          }
        },
        {
          "name": "ticket",
          "description": "Retrieve a Ticket object, which represents a sequence number set aside for future use. Can be provided as string (object ID of the Ticket) or as an object.",
          "schema": {
            "oneOf": [
              { "$ref": "#/components/schemas/ObjectID" },
              { "$ref": "#/components/schemas/Ticket" }
            ]
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "A single ledger object from the XRP Ledger in its raw format.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "sign",
      "description": "Cryptographically sign a transaction.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TxJson"
        },
        {
          "$ref": "#/components/contentDescriptors/Secret"
        },
        {
          "$ref": "#/components/contentDescriptors/Seed"
        },
        {
          "$ref": "#/components/contentDescriptors/SeedHex"
        },
        {
          "$ref": "#/components/contentDescriptors/Passphrase"
        },
        {
          "$ref": "#/components/contentDescriptors/KeyType"
        },
        {
          "name": "offline",
          "description": "If true, when constructing the transaction, do not try to automatically fill any transaction details. The default is false.",
          "schema": {
            "type": "boolean",
            "default": false
          }
        },
        {
          "name": "build_path",
          "description": "If this field is provided, the server auto-fills the Paths field of a Payment transaction before signing. You must omit this field if the transaction is a direct XRP payment or if it is not a Payment-type transaction. Caution: The server looks for the presence or absence of this field, not its value. This behavior may change.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "fee_mult_max",
          "description": "Signing fails with the error rpcHIGH_FEE if the auto-filled Fee value would be greater than the reference transaction cost × fee_mult_max ÷ fee_div_max. This field has no effect if you explicitly specify the Fee field of the transaction. The default is 10.",
          "schema": {
            "type": "integer",
            "default": 10
          }
        },
        {
          "name": "fee_div_max",
          "description": "Signing fails with the error rpcHIGH_FEE if the auto-filled Fee value would be greater than the reference transaction cost × fee_mult_max ÷ fee_div_max. This field has no effect if you explicitly specify the Fee field of the transaction. The default is 1.",
          "schema": {
            "type": "integer",
            "default": 1
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "A signed binary representation of the transaction.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "sign_for",
      "description": "Contribute to a multi-signature.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/TxJson"
        },
        {
          "$ref": "#/components/contentDescriptors/Secret"
        },
        {
          "$ref": "#/components/contentDescriptors/Seed"
        },
        {
          "$ref": "#/components/contentDescriptors/SeedHex"
        },
        {
          "$ref": "#/components/contentDescriptors/Passphrase"
        },
        {
          "$ref": "#/components/contentDescriptors/KeyType"
        }
      ],
      "result": {
        "name": "result",
        "description": "Signed transaction.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "submit",
      "description": "Send a transaction to the network.",
      "params": [
        {
          "name": "tx_blob",
          "description": "Hex representation of the signed transaction to submit. This can be a multi-signed transaction.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/HexString"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/FailHard"
        }
      ],
      "result": {
        "name": "result",
        "description": "The complete transaction and engine result.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "submit_multisigned",
      "description": "Send a multi-signed transaction to the network.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TxJson"
        },
        {
          "$ref": "#/components/contentDescriptors/FailHard"
        }
      ],
      "result": {
        "name": "result",
        "description": "The complete transaction and engine result.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "transaction_entry",
      "description": "Retrieve info about a transaction from a particular ledger version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "name": "tx_hash",
          "required": true,
          "description": "Unique hash of the transaction you are looking up",
          "schema": {
            "$ref": "#/components/schemas/Hex64String"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "tx",
      "description": "Retrieve info about a transaction from all the ledgers on hand.",
      "params": [
        {
          "name": "transaction",
          "required": true,
          "description": "The 256-bit hash of the transaction, as hex.",
          "schema": {
            "$ref": "#/components/schemas/Hex64String"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "name": "min_ledger",
          "description": "Use this with max_ledger to specify a range of up to 1000 ledger indexes, starting with this ledger (inclusive).",
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "name": "max_ledger",
          "description": "Use this with min_ledger to specify a range of up to 1000 ledger indexes, ending with this ledger (inclusive).",
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Information on a single transaction, by its identifying hash.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "tx_history",
      "description": "Retrieve info about all recent transactions.",
      "params": [
        {
          "name": "start",
          "required": true,
          "description": "Number of transactions to skip over.",
          "schema": {
            "$ref": "#/components/schemas/UnsignedInteger"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Some of the most recent transactions made.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "book_offers",
      "description": "Get info about offers to exchange two currencies.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "name": "taker",
          "description": "The Address of an account to use as a perspective.",
          "schema": {
            "$ref": "#/components/schemas/Taker"
          }
        },
        {
          "name": "taker_gets",
          "description": "Specification of which currency the account taking the offer would receive, as an object with currency and issuer fields (omit issuer for XRP).",
          "schema": {
            "$ref": "#/components/schemas/TakerGets"
          }
        },
        {
          "name": "taker_pays",
          "description": "Specification of which currency the account taking the offer would pay, as an object with currency and issuer fields (omit issuer for XRP).",
          "schema": {
            "$ref": "#/components/schemas/TakerPays"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "A list of offers, also known as the order book, between two currencies.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "deposit_authorized",
      "description": "Check whether an account is authorized to send money directly to another.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/SourceAccount"
        },
        {
          "$ref": "#/components/contentDescriptors/DestinationAccount"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "Indicates whether one account is authorized to send payments directly to another.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ripple_path_find",
      "description": "Find a path for payment between two accounts, once.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/SourceAccount"
        },
        {
          "$ref": "#/components/contentDescriptors/DestinationAccount"
        },
        {
          "$ref": "#/components/contentDescriptors/DestinationAmount"
        },
        {
          "name": "send_max",
          "description": "Currency Amount that would be spent in the transaction. Cannot be used with source_currencies.",
          "schema": {
            "$ref": "#/components/schemas/CurrencyAmount"
          }
        },
        {
          "name": "source_currencies",
          "description": "Array of currencies that the source account might want to spend. Each entry in the array should be a JSON object with a mandatory currency field and optional issuer field, like how currency amounts are specified. Cannot contain more than 18 source currencies. By default, uses all source currencies available up to a maximum of 88 different currency/issuer pairs.",
          "schema": {
            "type": "array",
            "maxlength": 18,
            "items": {
              "$ref": "#/components/schemas/CurrencyObject"
            }
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "A payment path you can use right away.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "channel_authorize",
      "description": "Sign a claim for money from a payment channel.",
      "params": [
        {
          "name": "channel_id",
          "description": "The unique ID of the payment channel to use.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Hex64String"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Secret"
        },
        {
          "$ref": "#/components/contentDescriptors/Seed"
        },
        {
          "$ref": "#/components/contentDescriptors/SeedHex"
        },
        {
          "$ref": "#/components/contentDescriptors/Passphrase"
        },
        {
          "$ref": "#/components/contentDescriptors/KeyType"
        },
        {
          "$ref": "#/components/contentDescriptors/Amount"
        }
      ],
      "result": {
        "name": "result",
        "description": "A signature that can be used to redeem a specific amount of XRP from a payment channel.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "channel_verify",
      "description": "Check a payment channel claim's signature.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Amount"
        },
        {
          "name": "channel_id",
          "required": true,
          "description": "The Channel ID of the channel that provides the XRP. This is a 64-character hexadecimal string.",
          "schema": {
            "$ref": "#/components/schemas/Hex64String"
          }
        },
        {
          "name": "public_key",
          "required": true,
          "description": "The public key of the channel and the key pair that was used to create the signature, in hexadecimal or the XRP Ledger's base58 format.",
          "schema": {
            "oneOf":[
              {
                "$ref": "#/components/schemas/AccountPublicKeyHex"
              },
              {
                "$ref": "#/components/schemas/AccountPublicKey"
              }
            ]
          }
        },
        {
          "name": "signature",
          "required": true,
          "description": "The signature to verify, in hexadecimal.",
          "schema": {
            "$ref": "#/components/schemas/HexString"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "A signature that can be used to redeem a specific amount of XRP from a payment channel",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "subscribe",
      "description": "Listen for updates about a particular subject.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Streams"
        },
        {
          "$ref": "#/components/contentDescriptors/Accounts"
        },
        {
          "$ref": "#/components/contentDescriptors/AccountsProposed"
        },
        {
          "$ref": "#/components/contentDescriptors/Books"
        },
        {
          "name": "url",
          "description": "URL where the server sends a JSON-RPC callbacks for each event. Admin-only.",
          "schema": {
            "$ref": "#/components/schemas/URL"
          }
        },
        {
          "name": "url_username",
          "description": "Username to provide for basic authentication at the callback URL.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "url_password",
          "description": "Password to provide for basic authentication at the callback URL.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Periodic notifications from the server when certain events happen.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "unsubscribe",
      "description": "Stop listening for updates about a particular subject.Stop listening for updates about a particular subject.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Streams"
        },
        {
          "$ref": "#/components/contentDescriptors/Accounts"
        },
        {
          "$ref": "#/components/contentDescriptors/AccountsProposed"
        },
        {
          "$ref": "#/components/contentDescriptors/BooksUnsubscribe"
        }
      ],
      "result": {
        "name": "result",
        "description": "Confirmation of unsubscribing.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "fee",
      "description": "Get information about transaction cost. This requires the FeeEscalation amendment to be enabled.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "The current state of the open-ledger requirements for the transaction cost.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "manifest",
      "description": "The manifest method reports the current manifest information for a given validator public key. The manifest is the public portion of that validator's configured token.",
      "params": [
        {
          "name": "public_key",
          "description": "The base58-encoded public key of the validator to look up. This can be the master public key or ephemeral public key.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ValidationPublicKey"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The current state of the open-ledger requirements for the transaction cost.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "server_info",
      "description": "Retrieve status of the server in human-readable format.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "Human-readable version of various information about the rippled server being queried.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "server_state",
      "description": "Retrieve status of the server in machine-readable format.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "Machine-readable information about the rippled server's current state.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ping",
      "description": "Confirm connectivity with the server.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "An acknowledgement, so that clients can test the connection status and latency.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "random",
      "description": "Generate a random number.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "A random number to be used as a source of entropy for random number generation by clients.",
        "schema": {
          "type": "object"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "Address": {
        "type": "string",
        "pattern": "^__ACCOUNT__$"
      },
      "AccountPublicKeyHex": {
        "type": "string",
        "pattern": "^__PUBLIC_KEY_HEX__$"
      },
      "AccountPublicKey": {
        "type": "string",
        "pattern": "^__PUBLIC_KEY__$"
      },
      "ValidationPublicKey": {
        "type": "string",
        "pattern": "^n[rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyzZ]{33,53}$"
      },
      "ObjectID": {
        "type": "string",
        "pattern": "^[0-9A-F]{64}$"
      },
      "UnsignedInteger": {
        "type": "string",
        "pattern": "^[0-9]*$"
      },
      "UnsignedInteger8bit": {
        "type": "string",
        "pattern": "^[0-9]*$"
      },
      "UnsignedInteger16bit": {
        "type": "string",
        "pattern": "^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$"
      },
      "UnsignedInteger32bit": {
        "type": "string",
        "pattern": "^[0-9]*$"
      },
      "HexString": {
        "type": "string",
        "pattern": "^(0x|0X)?[a-fA-F0-9]+$"
      },
      "Hex64String": {
        "type": "string",
        "pattern": "^[A-Fa-f0-9]{64}$"
      },
      "HexStringHash128": {
        "type": "string",
        "pattern": "^$|^[A-Fa-f0-9]{32}$"
      },
      "Blob": {
        "type": "string"
      },
      "URL": {
        "type": "string",
        "pattern": "(http(s)?:\\\/\\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}(\\.[a-z]{2,6})?\\b([-a-zA-Z0-9@:%_\\+.~#?&\\\/\\\/=]*)"
      },
      "Transaction": {
        "type": "object",
        "required": ["Account", "TransactionType", "Fee", "Sequence"],
        "properties": {
          "Account": {
            "description": "The unique address of the account that initiated the transaction.",
            "$ref": "#/components/schemas/Address"
          },
          "TransactionType": {
            "description": "The type of transaction.",
            "type": "string",
            "enum": ["Payment", "OfferCreate", "OfferCancel", "TrustSet", "AccountSet", "AccountDelete", "SetRegularKey", "SignerListSet", "EscrowCreate", "EscrowFinish", "EscrowCancel", "PaymentChannelCreate", "PaymentChannelFund", "PaymentChannelClaim", "DepositPreauth"]
          },
          "Fee": {
            "description": "Integer amount of XRP, in drops, to be destroyed as a cost for distributing this transaction to the network.",
            "$ref": "#/components/schemas/UnsignedInteger"
          },
          "Sequence": {
            "description": "The sequence number of the account sending the transaction. A transaction is only valid if the Sequence number is exactly 1 greater than the previous transaction from the same account. The special case 0 means the transaction is using a Ticket instead",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "AccountTxnID": {
            "description": "Hash value identifying another transaction. If provided, this transaction is only valid if the sending account's previously-sent transaction matches the provided hash.",
            "$ref": "#/components/schemas/Hex64String"
          },
          "Flags": {
            "description": "Set of bit-flags for this transaction.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "LastLedgerSequence": {
            "description": "Highest ledger index this transaction can appear in. Specifying this field places a strict upper limit on how long the transaction can wait to be validated or rejected.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "Memos": {
            "description": "Additional arbitrary information used to identify this transaction.",
            "type": "array",
            "items": {
              "type": "object",
              "required": ["Memo"],
              "properties": {
                "Memo": {
                  "description": "Each object has only one field, Memo, which in turn contains another object Memo.",
                  "$ref": "#/components/schemas/Memo"
                }
              }
            }
          },
          "Signers": {
            "description": "Array of objects that represent a multi-signature which authorizes this transaction.",
            "type": "array",
            "items": {
              "type": "object",
              "required": ["Signer"],
              "properties": {
                "Signer": {
                  "description": "The Signers list is an array of objects, each with one field, Signer.",
                  "$ref": "#/components/schemas/Signer"
                }
              }
            }
          },
          "SourceTag": {
            "description": "Arbitrary integer used to identify the reason for this payment, or a sender on whose behalf this transaction is made. Conventionally, a refund should specify the initial payment's SourceTag as the refund payment's DestinationTag.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "SigningPubKey": {
            "description": "(Automatically added when signing) Hex representation of the public key that corresponds to the private key used to sign this transaction. If an empty string, indicates a multi-signature is present in the Signers field instead.",
            "$ref": "#/components/schemas/HexString"
          },
          "TicketSequence": {
            "description": "The sequence number of the ticket to use in place of a Sequence number. If this is provided, Sequence must be 0. Cannot be used with AccountTxnID.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "TxnSignature": {
            "description": "(Automatically added when signing) The signature that verifies this transaction as originating from the account it says it is from.",
            "type": "string"
          },
          "ClearFlag": {
            "description": "AccountSet Fields - Unique identifier of a flag to disable for this account.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "Domain": {
            "description": "AccountSet Fields - The domain that owns this account, as a string of hex representing the ASCII for the domain in lowercase. Cannot be more than 256 bytes in length.",
            "$ref": "#/components/schemas/HexString"
          },
          "EmailHash": {
            "description": "AccountSet Fields - Hash of an email address to be used for generating an avatar image. ",
            "$ref": "#/components/schemas/HexStringHash128"
          },
          "MessageKey": {
            "description": "AccountSet Fields - Public key for sending encrypted messages to this account.",
            "$ref": "#/components/schemas/Blob"
          },
          "SetFlag": {
            "description": "AccountSet Fields - Integer flag to enable for this account.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "TransferRate": {
            "description": "AccountSet Fields - The fee to charge when users transfer this account's issued currencies, represented as billionths of a unit. Cannot be more than 2000000000 or less than 1000000000, except for the special case 0 meaning no fee.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "TickSize": {
            "description": "AccountSet Fields - Tick size to use for offers involving a currency issued by this address. The exchange rates of those offers is rounded to this many significant digits. Valid values are 3 to 15 inclusive, or 0 to disable.",
            "$ref": "#/components/schemas/UnsignedInteger8bit"
          },
          "Destination": {
            "description": "AccountDelete Fields - The address of an account to receive any leftover XRP after deleting the sending account. Must be a funded account in the ledger, and must not be the sending account.",
            "$ref": "#/components/schemas/Address"
          },
          "DestinationTag": {
            "description": "AccountDelete Fields - Arbitrary destination tag that identifies a hosted recipient or other information for the recipient of the deleted account's leftover XRP.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "CheckID": {
            "description": "CheckCancel Fields - The ID of the Check ledger object to cancel, as a 64-character hexadecimal string.",
            "$ref": "#/components/schemas/Hex64String"
          },
          "Amount": {
            "description": "CheckCash Fields - Redeem the Check for exactly this amount, if possible.",
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "DeliverMin": {
            "description": "CheckCash Fields - Redeem the Check for at least this amount and for as much as possible.",
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "SendMax": {
            "description": "CheckCreate Fields - Maximum amount of source currency the Check is allowed to debit the sender, including transfer fees on non-XRP currencies.",
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "Expiration": {
            "description": "CheckCreate Fields - Time after which the Check is no longer valid, in seconds since the Ripple Epoch.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "InvoiceID": {
            "description": "CheckCreate Fields - Arbitrary 256-bit hash representing a specific reason or identifier for this Check.",
            "$ref": "#/components/schemas/Hex64String"
          },
          "Authorize": {
            "description": "DepositPreauth Fields - AThe XRP Ledger address of the sender to preauthorize.",
            "$ref": "#/components/schemas/Address"
          },
          "Unauthorize": {
            "description": "DepositPreauth Fields - The XRP Ledger address of a sender whose preauthorization should be revoked.",
            "$ref": "#/components/schemas/Address"
          },
          "Owner": {
            "description": "EscrowCancel Fields - Address of the source account that funded the escrow payment.",
            "$ref": "#/components/schemas/Address"
          },
          "OfferSequence": {
            "description": "EscrowCancel Fields - Transaction sequence (or Ticket number) of EscrowCreate transaction that created the escrow to cancel.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "CancelAfter": {
            "description": "EscrowCreate Fields - The time, in seconds since the Ripple Epoch, when this escrow expires.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "FinishAfter": {
            "description": "EscrowCreate Fields - The time, in seconds since the Ripple Epoch, when the escrowed XRP can be released to the recipient.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "Condition": {
            "description": "EscrowCreate Fields - Hex value representing a PREIMAGE-SHA-256 crypto-condition. The funds can only be delivered to the recipient if this condition is fulfilled.",
            "$ref": "#/components/schemas/HexString"
          },
          "Fulfillment": {
            "description": "EscrowFinish Fields - Hex value of the PREIMAGE-SHA-256 crypto-condition fulfillment matching the held payment's Condition.",
            "$ref": "#/components/schemas/HexString"
          },
          "TakerGets": {
            "description": "OfferCreate Fields - The amount and type of currency being provided by the offer creator.",
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "TakerPays": {
            "description": "OfferCreate Fields - The amount and type of currency being requested by the offer creator.",
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "Balance": {
            "description": "PaymentChannelClaim Fields - Total amount of XRP, in drops, delivered by this channel after processing this claim.",
            "$ref": "#/components/schemas/XRPdrops"
          },
          "Channel": {
            "description": "PaymentChannelClaim Fields - The unique ID of the channel, as a 64-character hexadecimal string.",
            "$ref": "#/components/schemas/Hex64String"
          },
          "Signature": {
            "description": "PaymentChannelClaim Fields - The signature of this claim, as hexadecimal. The signed message contains the channel ID and the amount of the claim. ",
            "$ref": "#/components/schemas/Hex64String"
          },
          "PublicKey": {
            "description": "PaymentChannelCreate Fields - The public key of the key pair the source will use to sign claims against this channel, in hexadecimal. This can be any secp256k1 or Ed25519 public key.",
            "$ref": "#/components/schemas/AccountPublicKeyHex"
          },
          "SettleDelay": {
            "description": "PaymentChannelCreate Fields - Amount of time the source address must wait before closing the channel if it has unclaimed XRP.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "RegularKey": {
            "description": "SetRegularKey Fields - A base-58-encoded Address that indicates the regular key pair to be assigned to the account. If omitted, removes any existing regular key pair from the account. Must not match the master key pair for the address.",
            "$ref": "#/components/schemas/Address"
          },
          "SignerQuorum": {
            "description": "SignerListSet Fields - A target number for the signer weights. A multi-signature from this list is valid only if the sum weights of the signatures provided is greater than or equal to this value. To delete a signer list, use the value 0.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "SignerEntries": {
            "description": "SignerListSet Fields - Array of SignerEntry objects, indicating the addresses and weights of signers in this list. This signer list must have at least 1 member and no more than 8 members. No address may appear more than once in the list, nor may the Account submitting the transaction appear in the list.",
            "type": "array",
            "minlength": 1,
            "maxlength": 8,
            "items": {
              "$ref": "#/components/schemas/SignerEntry"
            }
          },
          "TicketCount": {
            "description": "TicketCreate Fields - How many Tickets to create. This must be a positive number and cannot cause the account to own more than 250 Tickets after executing this transaction.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "LimitAmount": {
            "description": "TrustSet Fields - Object defining the trust line to create or modify, in the format of a Currency Amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "QualityIn": {
            "description": "TrustSet Fields - Value incoming balances on this trust line at the ratio of this number per 1,000,000,000 units. A value of 0 is shorthand for treating balances at face value.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          },
          "QualityOut": {
            "description": "TrustSet Fields - Value outgoing balances on this trust line at the ratio of this number per 1,000,000,000 units. A value of 0 is shorthand for treating balances at face value.",
            "$ref": "#/components/schemas/UnsignedInteger32bit"
          }
        }
      },
      "DepositPreauth": {
        "description": "A DepositPreauth object.",
        "type": "object",
        "required": ["owner", "authorized"],
        "properties": {
          "owner": {
            "description": "The account that provided the preauthorization.",
            "$ref": "#/components/schemas/Address"
          },
          "authorized": {
            "description": "The account that received the preauthorization.",
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "DirectoryNode": {
        "description": "Provides a list of links to other objects in the ledger's state tree. Requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
        "type": "object",
        "properties": {
          "owner": {
            "description": "The address of the account that owns the objects in this directory.",
            "$ref": "#/components/schemas/Address"
          },
          "sub_index": {
            "description": "If provided, jumps to a later 'page' of the DirectoryNode.",
            "$ref": "#/components/schemas/UnsignedInteger"
          },
          "dir_root": {
            "description": "Unique index identifying the directory to retrieve, as a hex string.",
            "$ref": "#/components/schemas/HexString"
          }
        }
      },
      "Escrow": {
        "description": "An Escrow object.",
        "type": "object",
        "required": ["owner", "seq"],
        "properties": {
          "owner": {
            "description": "The owner (sender) of the Escrow object.",
            "$ref": "#/components/schemas/Address"
          },
          "sec": {
            "description": "The sequence number of the transaction that created the Escrow object.",
            "$ref": "#/components/schemas/UnsignedInteger"
          }
        }
      },
      "Ticket": {
        "description": "A Ticket object. Represents a sequence number set aside for future use.",
        "type": "object",
        "required": ["owner", "ticket_sequence"],
        "properties": {
          "owner": {
            "description": "The owner of the Ticket object.",
            "$ref": "#/components/schemas/Address"
          },
          "ticket_sequence": {
            "description": "The Ticket Sequence number of the Ticket entry to retrieve.",
            "$ref": "#/components/schemas/UnsignedInteger"
          }
        }
      },
      "Offer": {
        "description": "An Offer object.",
        "type": "object",
        "required": ["account", "seq"],
        "properties": {
          "account": {
            "description": "The account that placed the offer.",
            "$ref": "#/components/schemas/Address"
          },
          "seq": {
            "description": "The sequence number of the transaction that created the Offer object.",
            "$ref": "#/components/schemas/UnsignedInteger"
          }
        }
      },
      "RippleState": {
        "description": "Object specifying the RippleState (trust line) object to retrieve. The accounts and currency sub-fields are required to uniquely specify the RippleState entry to retrieve.",
        "type": "object",
        "required": ["accounts", "currency"],
        "properties": {
          "accounts": {
            "description": "2-length array of account Addresses, defining the two accounts linked by this RippleState object.",
            "type": "array",
            "length": 2,
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "Memo": {
        "description": "Additional arbitrary information used to identify this transaction.",
        "type": "object",
        "properties": {
          "MemoData": {
            "description": "Arbitrary hex value, conventionally containing the content of the memo.",
            "$ref": "#/components/schemas/HexString"
          },
          "MemoFormat": {
            "description": "Hex value representing characters allowed in URLs.",
            "$ref": "#/components/schemas/HexString"
          },
          "MemoType": {
            "description": "Hex value representing characters allowed in URLs.",
            "$ref": "#/components/schemas/HexString"
          }
        }
      },
      "Signer": {
        "description": "The Signer field has nested fields.",
        "type": "object",
        "required": ["Account", "TxnSignature", "SigningPubKey"],
        "properties": {
          "Account": {
            "description": "The address associated with this signature, as it appears in the signer list.",
            "$ref": "#/components/schemas/Address"
          },
          "TxnSignature": {
            "description": "A signature for this transaction, verifiable using the SigningPubKey.",
            "$ref": "#/components/schemas/Blob"
          },
          "SigningPubKey": {
            "description": "The public key used to create this signature.",
            "$ref": "#/components/schemas/Blob"
          }
        }
      },
      "SignerEntry": {
        "description": "Each member of the SignerEntries field is an object that describes that signer in the list.",
        "type": "object",
        "required": ["Account", "SignerWeight"],
        "properties": {
          "Account": {
            "description": "An XRP Ledger address whose signature contributes to the multi-signature. It does not need to be a funded address in the ledger.",
            "$ref": "#/components/schemas/Address"
          },
          "SignerWeight": {
            "description": "The weight of a signature from this signer. A multi-signature is only valid if the sum weight of the signatures provided meets or exceeds the signer list's SignerQuorum value.",
            "$ref": "#/components/schemas/UnsignedInteger16bit"
          }
        }
      },
      "Currency": {
        "description": "Specification of which currency the account taking the Offer would receive, as a currency object with no amount.",
        "oneOf": [
          {
            "type": "string",
            "pattern": "^[a-zA-Z0-9?!@#$%^&*<>(){}[\\]|]{3}$"
          },
          {
            "type": "string",
            "pattern": "^[a-fA-F0-9]{40}$"
          }
        ]
      },
      "CurrencyObject": {
        "type": "object",
        "description": "A currency specification object (for issued currencies).",
        "required": ["currency"],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "value": {
            "description": "Amounts of currency for both XRP and issued currencies.",
            "type": "string",
            "pattern": "(^\\-?(\\d(\\.\\d+)?[Ee][+-]?\\d+)$)|(^\\-?[0-9]+(\\.[0-9]{1,2})?$)"
          },
          "issuer": {
            "description": "Unique account address of the entity issuing the currency. In other words, the person or business where the currency can be redeemed.",
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "CurrencyAmount": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/XRPdrops"
          },
          {
            "$ref": "#/components/schemas/CurrencyObject"
          }
        ]
      },
      "XRPdrops": {
        "type": "string",
        "description": "XRP drops",
        "pattern": "^(?:-1|[0-9]|[1-9][0-9]{1,14}|1000000000000000|10000000000000000)$"
      },
      "Taker": {
        "description": "Unique account address to use as a perspective for viewing offers, in the XRP Ledger's base58 format.",
        "$ref": "#/components/schemas/Address"
      },
      "TakerGets": {
        "description": "Specification of which currency the account taking the Offer would receive, as a currency object with no amount.",
        "$ref": "#/components/schemas/CurrencyObject"
      },
      "TakerPays": {
        "description": "Specification of which currency the account taking the Offer would pay, as a currency object with no amount.",
        "$ref": "#/components/schemas/CurrencyObject"
      },
      "Book": {
        "type": "object",
        "description": "An order book",
        "required": ["taker_gets", "taker_pays", "taker"],
        "properties": {
          "taker_gets": {
            "$ref": "#/components/schemas/TakerGets"
          },
          "taker_pays": {
            "$ref": "#/components/schemas/TakerPays"
          },
          "taker": {
            "$ref": "#/components/schemas/Taker"
          },
          "snapshot": {
            "description": "If true, return the current state of the order book once when you subscribe before sending updates. The default is false.",
            "type": "boolean"
          },
          "both": {
            "description": "If true, return both sides of the order book. The default is false.",
            "type": "boolean"
          }
        }
      },
      "BookUnsubscribe": {
        "type": "object",
        "description": "An order book",
        "required": ["taker_gets", "taker_pays"],
        "properties": {
          "taker_gets": {
            "description": "Specification of which currency the account taking the Offer would receive, as a currency object with no amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "taker_pays": {
            "description": "Specification of which currency the account taking the Offer would pay, as a currency object with no amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "both": {
            "description": "If true, return both sides of the order book. The default is false.",
            "type": "boolean"
          }
        }
      }
    },
    "contentDescriptors": {
      "Account": {
        "name": "account",
        "description": "The unique identifier of an account, typically the account's Address.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "LedgerHash": {
        "name": "ledger_hash",
        "description": "A 20-byte hex string for the ledger version to use.",
        "schema": {
          "$ref": "#/components/schemas/Hex64String"
        }
      },
      "LedgerIndex": {
        "name": "ledger_index",
        "description": "The ledger index of the ledger to use, or a shortcut string ('current', 'closed', or 'validated') to choose a ledger automatically.",
        "schema": {
          "oneOf": [
            { "type": "integer", "minimum": 0, "maximum": 4294967296 },
            { "type": "string", "enum": ["validated", "closed", "current"] }
          ]
        }
      },
      "Strict": {
        "name": "strict",
        "description": "If true, then the account field only accepts a public key or XRP Ledger address. Otherwise, account can be a secret or passphrase (not recommended). The default is false.",
        "schema": {
          "type": "boolean"
        }
      },
      "Limit": {
        "name": "limit",
        "description": "Limit the number of transactions to retrieve. Cannot be less than 10 or more than 400. The default is 200.",
        "schema": {
          "type": "integer",
          "minimum": 10,
          "maximum": 400
        }
      },
      "Marker": {
        "name": "marker",
        "description": "Value from a previous paginated response. Resume retrieving data where that response left off.",
        "schema": {
          "type": "object"
        }
      },
      "TxJson": {
        "name": "tx_json",
        "description": "The Transaction to sign.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Transaction"
        }
      },
      "FailHard": {
        "name": "fail_hard",
        "description": "If true, and the transaction fails locally, do not retry or relay the transaction to other servers",
        "schema": {
          "type": "boolean"
        }
      },
      "Secret": {
        "name": "secret",
        "description": "The secret key to use to sign the claim. This must be the same key pair as the public key specified in the channel. Cannot be used with seed, seed_hex, or passphrase.",
        "schema": {
          "type": "string",
          "pattern": "^__MASTER_KEY__$"
        }
      },
      "Seed": {
        "name": "seed",
        "description": "The secret seed to use to sign the claim. This must be the same key pair as the public key specified in the channel. Must be in the XRP Ledger's base58 format. If provided, you must also specify the key_type. Cannot be used with secret, seed_hex, or passphrase. ",
        "schema": {
          "type": "string",
          "pattern": "^__MASTER_SEED__$"
        }
      },
      "SeedHex": {
        "name": "seed_hex",
        "description": "The secret seed to use to sign the claim. This must be the same key pair as the public key specified in the channel. Must be in hexadecimal format. If provided, you must also specify the key_type. Cannot be used with secret, seed, or passphrase.",
        "schema": {
          "type": "string",
          "pattern": "^__MASTER_SEED_HEX__$"
        }
      },
      "Passphrase": {
        "name": "passphrase",
        "description": "A string passphrase to use to sign the claim. This must be the same key pair as the public key specified in the channel. The key derived from this passphrase must match the public key specified in the channel. If provided, you must also specify the key_type. Cannot be used with secret, seed, or seed_hex.",
        "schema": {
          "type": "string"
        }
      },
      "KeyType": {
        "name": "key_type",
        "description": "The signing algorithm of the cryptographic key pair provided. Valid types are secp256k1 or ed25519. The default is secp256k1.",
        "schema": {
          "type": "string",
          "enum": ["secp256k1", "ed25519"]
        }
      },
      "Transactions": {
        "name": "transactions",
        "description": "If true, return information on transactions in the specified ledger version. Defaults to false. Ignored if you did not specify a ledger version.",
        "schema": {
          "type": "boolean"
        }
      },
      "Binary": {
        "name": "binary",
        "description": "Return transaction information in binary format (hexadecimal string) instead of JSON format.",
        "schema": {
          "type": "boolean"
        }
      },
      "Queue": {
        "name": "queue",
        "description": "If true, and the command is requesting the current ledger, includes an array of queued transactions in the results.",
        "schema": {
          "type": "boolean"
        }
      },
      "Amount": {
        "name": "amount",
        "required": true,
        "description": "The amount of XRP, in drops, the provided signature authorizes.",
        "schema": {
          "$ref": "#/components/schemas/UnsignedInteger"
        }
      },
      "Streams": {
        "name": "streams",
        "description": "Array of string names of generic streams to subscribe to.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["server", "ledger", "transactions", "transactions_proposed", "validations", "conensus", "peer_status"]
          }
        }
      },
      "Accounts": {
        "name": "accounts",
        "description": "Array with the unique addresses of accounts to monitor for validated transactions.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "AccountsProposed": {
        "name": "accounts_proposed",
        "description": "Array with the unique addresses of accounts to monitor for validated transactions, include transactions that are not yet finalized.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "SourceAccount": {
        "name": "source_account",
        "description": "Unique address of the account that would send funds in a transaction.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "DestinationAccount": {
        "name": "destination_account",
        "description": "Unique address of the account that would receive funds in a transaction.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "DestinationAmount": {
        "name": "destination_amount",
        "description": "Currency Amount that the destination account would receive in a transaction.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CurrencyAmount"
        }
      },
      "SendMax": {
        "name": "send_max",
        "description": "Currency Amount that would be spent in the transaction. Cannot be used with source_currencies.",
        "schema": {
          "$ref": "#/components/schemas/CurrencyAmount"
        }
      },
      "Books": {
        "name": "books",
        "description": "Array of objects defining order books to monitor for updates.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Book"
          }
        }
      },
      "BooksUnsubscribe": {
        "name": "books_unsubscribe",
        "description": "The objects in the books array are defined almost like the ones from subscribe, except that they don't have all the fields.",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/BookUnsubscribe"
          }
        }
      }
    }
  }
}
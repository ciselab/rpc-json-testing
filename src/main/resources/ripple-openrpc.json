{
  "openrpc": "1.0.0-rc1",
  "info": {
    "version": "1.0.0",
    "title": "Ripple JSON-RPC",
    "description": "This API lets you interact with a rippled server via JSON-RPC"
  },
  "servers": [
    {
      "name": "Ripple testnet",
      "url": "https://s.devnet.rippletest.net"
    }
  ],
  "methods": [
    {
      "name": "account_channels",
      "description": "The account_channels method returns information about an account's Payment Channels. This includes only channels where the specified account is the channel's source, not the destination. (A channel's 'source' and 'owner' are the same.) All information retrieved is relative to a particular version of the ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "destination_account",
          "description": "The unique identifier of an account, typically the account's Address. If provided, filter results to payment channels whose destination is this account.",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "A list of payment channels where the account is the source of the channel.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_currencies",
      "description": "The account_currencies command retrieves a list of currencies that an account can send or receive, based on its trust lines. (This is not a thoroughly confirmed list, but it can be used to populate user interfaces.)",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        }
      ],
      "result": {
        "name": "result",
        "description": "A list of currencies that an account can send or receive.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_info",
      "description": "The account_info command retrieves information about an account, its activity, and its XRP balance. All information retrieved is relative to a particular version of the ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Queue"
        },
        {
          "name": "signer_lists",
          "description": "If true, and the MultiSign amendment is enabled, also returns any SignerList objects associated with this account.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        }
      ],
      "result": {
        "name": "result",
        "description": "Basic data about an account.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_lines",
      "description": "The account_lines method returns information about an account's trust lines, including balances in all non-XRP currencies and assets. All information retrieved is relative to a particular version of the ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "name": "peer",
          "description": "The Address of a second account. If provided, show only lines of trust connecting the two accounts.",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about an account's trust lines.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_objects",
      "description": "The account_objects command returns the raw ledger format for all objects owned by an account. For a higher-level view of an account's trust lines and balances, see the account_lines method instead.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "type",
          "description": "If included, filter results to include only this type of ledger object. The valid types are: check, deposit_preauth, escrow, offer, payment_channel, signer_list, ticket, and state (trust line).",
          "schema": {
            "type": "string",
            "enum": ["check", "deposit_preauth", "escrow", "offer", "payment_channel", "signer_list", "ticket", "state"]
          }
        },
        {
          "name": "deletion_blockers_only",
          "description": "If true, the response only includes objects that would block this account from being deleted. The default is false.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "All ledger objects owned by an account.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_offers",
      "description": "The account_offers method retrieves a list of offers made by a given account that are outstanding as of a particular ledger version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about an account's currency exchange offers.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "account_tx",
      "description": "The account_tx method retrieves a list of transactions that involved the specified account.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "ledger_index_min",
          "description": "Use to specify the earliest ledger to include transactions from. A value of -1 instructs the server to use the earliest validated ledger version available.",
          "schema": {
            "type": "integer",
            "minimum": -1
          }
        },
        {
          "name": "ledger_index_max",
          "description": "Use to specify the most recent ledger to include transactions from. A value of -1 instructs the server to use the most recent validated ledger version available.",
          "schema": {
            "type": "integer",
            "minimum": -1
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "name": "forward",
          "description": "Defaults to false. If set to true, returns values indexed with the oldest ledger first. Otherwise, the results are indexed with the newest ledger first.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about an account's transactions.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "gateway_balances",
      "description": "The gateway_balances command calculates the total balances issued by a given account, optionally excluding amounts held by operational addresses.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "$ref": "#/components/contentDescriptors/Strict"
        },
        {
          "name": "hotwallet",
          "description": "An operational address to exclude from the balances issued, or an array of such addresses.",
          "schema": {
            "oneOf": [
            { "$ref": "#/components/schemas/Address"},
            { "type": "array", "items": {"$ref": "#/components/schemas/Address"} }
          ]
          }
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "Total amounts issued by an account.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "noripple_check",
      "description": "The noripple_check command provides a quick way to check the status of the Default Ripple field for an account and the No Ripple flag of its trust lines, compared with the recommended settings.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Account"
        },
        {
          "name": "role",
          "description": "Whether the address refers to a gateway or user. Recommendations depend on the role of the account. Issuers must have Default Ripple enabled and must disable No Ripple on all trust lines. Users should have Default Ripple disabled, and should enable No Ripple on all trust lines.",
          "schema": {
            "type": "string", 
            "enum": ["gateway", "user"]
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Transactions"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "Recommended changes to an account's Default Ripple and No Ripple settings.",
        "schema": {
          "type": "object"
        }
      }
    },
    {
      "name": "ledger",
      "description": "Retrieve information about the public ledger.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "name": "full",
          "description": "Admin required. If true, return full information on the entire ledger. Ignored if you did not specify a ledger version. Defaults to false. (Equivalent to enabling transactions, accounts, and expand.) Caution: This is a very large amount of data -- on the order of several hundred megabytes!",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "accounts",
          "description": "Admin required. If true, return information on accounts in the ledger. Ignored if you did not specify a ledger version. Defaults to false. Caution: This returns a very large amount of data!",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Transactions"
        },
        {
          "name": "expand",
          "description": "Provide full JSON-formatted information for transaction/account information instead of only hashes. Defaults to false. Ignored unless you request transactions, accounts, or both.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "owner_funds",
          "description": "If true, include owner_funds field in the metadata of OfferCreate transactions in the response. Defaults to false. Ignored unless transactions are included and expand is true.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "$ref": "#/components/contentDescriptors/Queue"
        }
      ],
      "result": {
        "name": "result",
        "description": "Info about a ledger version.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "ledger_closed",
      "description": "Get the latest closed ledger version.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "The unique identifiers of the most recently closed ledger.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "ledger_current",
      "description": "Get the current working ledger version.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "The unique identifiers of the current in-progress ledger.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "ledger_data",
      "description": "Get the raw contents of a ledger version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "$ref": "#/components/contentDescriptors/Limit"
        },
        {
          "$ref": "#/components/contentDescriptors/Marker"
        }
      ],
      "result": {
        "name": "result",
        "description": "Contents of the specified ledger.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "ledger_entry",
      "description": "Get one element from a ledger version.",
      "params": [
        {
          "name": "index",
          "description": "Specify the object ID of a single object to retrieve from the ledger.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "account_root",
          "description": "Specify an AccountRoot object to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "name": "check",
          "description": "Specify the object ID of a Check object to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "deposit_preauth",
          "description": "Specify a DepositPreauth object to retrieve. If a string, must be the object ID of the DepositPreauth object, as hexadecimal. If an object, requires owner and authorized sub-fields.",
          "schema": {
            "oneOf": [
            { "$ref": "#/components/schemas/ObjectID" },
            { "$ref": "#/components/schemas/DepositPreauth" }
          ]
          }
        },
        {
          "name": "directory",
          "description": "Specify a DirectoryNode to retrieve. If a string, must be the object ID of the directory, as hexadecimal. If an object, requires either dir_root or owner as a sub-field, plus optionally a sub_index sub-field.",
          "schema": {
            "oneOf": [
            { "$ref": "#/components/schemas/ObjectID" },
            { "$ref": "#/components/schemas/DirectoryNode" }
          ]
          }
        },
        {
          "name": "escrow",
          "description": "Specify an Escrow object to retrieve. If a string, must be the object ID of the Escrow, as hexadecimal. If an object, requires owner and seq sub-fields.",
          "schema": {
            "oneOf": [
            { "$ref": "#/components/schemas/ObjectID" },
            { "$ref": "#/components/schemas/Escrow" }
          ]
          }
        },
        {
          "name": "offer",
          "description": "Specify an Offer object to retrieve. If a string, interpret as the unique index to the Offer. If an object, requires the sub-fields account and seq to uniquely identify the offer.",
          "schema": {
            "oneOf": [
            { "$ref": "#/components/schemas/ObjectID" },
            { "$ref": "#/components/schemas/Offer" }
          ]
          }
        },
        {
          "name": "payment_channel",
          "description": "(Optional) Specify the object ID of a PayChannel object to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "ripple_state",
          "description": "(Optional) Object specifying the RippleState (trust line) object to retrieve. The accounts and currency sub-fields are required to uniquely specify the RippleState entry to retrieve.",
          "schema": {
            "$ref": "#/components/schemas/RippleState"
          }
        },
        {
          "$ref": "#/components/contentDescriptors/Binary"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerHash"
        },
        {
          "$ref": "#/components/contentDescriptors/LedgerIndex"
        }
      ],
      "result": {
        "name": "result",
        "description": "A single ledger object from the XRP Ledger in its raw format.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "sign",
      "description": "Cryptographically sign a transaction.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "sign_for",
      "description": "Contribute to a multi-signature.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "submit",
      "description": "Send a transaction to the network.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "submit_multisigned",
      "description": "Send a multi-signed transaction to the network.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "transaction_entry",
      "description": "Retrieve info about a transaction from a particular ledger version.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "tx",
      "description": "Retrieve info about a transaction from all the ledgers on hand.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "tx_history",
      "description": "Retrieve info about all recent transactions.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "book_offers",
      "description": "Get info about offers to exchange two currencies.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "deposit_authorized",
      "description": "Check whether an account is authorized to send money directly to another.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "path_find",
      "description": "Find a path for a payment between two accounts and receive updates.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "ripple_path_find",
      "description": "Find a path for payment between two accounts, once.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "channel_authorize",
      "description": "Sign a claim for money from a payment channel.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "channel_verify",
      "description": "Check a payment channel claim's signature.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "subscribe",
      "description": "Listen for updates about a particular subject.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Streams"
        },
        {
          "$ref": "#/components/contentDescriptors/Accounts"
        },
        {
          "$ref": "#/components/contentDescriptors/AccountsProposed"
        },
        {
          "$ref": "#/components/contentDescriptors/Books"
        },
        {
          "name": "url",
          "description": "URL where the server sends a JSON-RPC callbacks for each event. Admin-only.",
          "schema": {
            "type": "string", "pattern": "^(http:\\\/\\\/www\\.|https:\\\/\\\/www\\.|http:\\\/\\\/|https:\\\/\\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\\/.*)?$"
          }
        },
        {
          "name": "url_username",
          "description": "Username to provide for basic authentication at the callback URL.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "url_password",
          "description": "Password to provide for basic authentication at the callback URL.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Periodic notifications from the server when certain events happen.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "unsubscribe",
      "description": "Stop listening for updates about a particular subject.Stop listening for updates about a particular subject.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Streams"
        },
        {
          "$ref": "#/components/contentDescriptors/Accounts"
        },
        {
          "$ref": "#/components/contentDescriptors/AccountsProposed"
        },
        {
          "$ref": "#/components/contentDescriptors/BooksUnsubscribe"
        }
      ],
      "result": {
        "name": "result",
        "description": "Confirmation of unsubscribing.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "fee",
      "description": "Get information about transaction cost. This requires the FeeEscalation amendment to be enabled.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "The current state of the open-ledger requirements for the transaction cost.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "server_info",
      "description": "Retrieve status of the server in human-readable format.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "Human-readable version of various information about the rippled server being queried.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "server_state",
      "description": "Retrieve status of the server in machine-readable format.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "Machine-readable information about the rippled server's current state.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "ping",
      "description": "Confirm connectivity with the server.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "An acknowledgement, so that clients can test the connection status and latency.",
        "schema": {
          "type": "object"
        }
      }
    },
   {
      "name": "random",
      "description": "Generate a random number.",
      "params": [
      ],
      "result": {
        "name": "result",
        "description": "A random number to be used as a source of entropy for random number generation by clients.",
        "schema": {
          "type": "object"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "Address": {
        "type": "string",
        "pattern": "^r[1-9a-zA-Z]{25,35}$"
      },
      "ObjectID": {
        "type": "string",
        "pattern": "^[0-9A-F]{64}$"
      },
      "UnsignedInteger": {
        "type": "string",
        "pattern": "^[0-9]*$"
      },
      "DepositPreauth": {
        "description": "A DepositPreauth object.",
        "type": "object", 
        "required": ["owner", "authorized"],
        "properties": {
          "owner": {
            "description": "The account that provided the preauthorization.",
            "$ref": "#/components/schemas/Address"
          },
          "authorized": {
          "description": "The account that received the preauthorization.",
          "$ref": "#/components/schemas/Address"
          }
        }
      },
      "DirectoryNode": {
        "description": "Provides a list of links to other objects in the ledger's state tree.",
        "type": "object", 
        "required": ["owner"],
        "properties": {
          "owner": {
            "description": "The address of the account that owns the objects in this directory.",
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Escrow": {
        "description": "An Escrow object.",
        "type": "object", 
        "required": ["owner", "seq"],
        "properties": {
          "owner": {
            "description": "The owner (sender) of the Escrow object.",
            "$ref": "#/components/schemas/Address"
          },
            "sec": {
            "description": "The sequence number of the transaction that created the Escrow object.",
            "$ref": "#/components/schemas/UnsignedInteger"
          }
        }
      },
      "Offer": {
        "description": "An Offer object.",
        "type": "object", 
        "required": ["account", "seq"],
        "properties": {
          "account": {
            "description": "The account that placed the offer.",
            "$ref": "#/components/schemas/Address"
          },
            "sec": {
            "description": "The sequence number of the transaction that created the Offer object.",
            "$ref": "#/components/schemas/UnsignedInteger"
          }
        }
      },
      "RippleState": {
        "description": "Object specifying the RippleState (trust line) object to retrieve. The accounts and currency sub-fields are required to uniquely specify the RippleState entry to retrieve.",
        "type": "object", 
        "required": ["accounts", "currency"],
        "properties": {
          "accounts": {
            "description": "2-length array of account Addresses, defining the two accounts linked by this RippleState object.",
            "type": "array",
            "length": 2,
            "items": { 
              "$ref": "#/components/schemas/Address"
            }
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "Currency": {
        "description": "Specification of which currency the account taking the Offer would receive, as a currency object with no amount.",
        "oneOf": [
          { 
            "type": "string", 
            "pattern": "^\\D{3}$" 
          },
          { 
            "type": "string", 
            "pattern": "^[a-fA-F0-9]{40}$" 
          }
        ]
      },
      "CurrencyObject": {
        "type": "object",
        "description": "A currency specification object.",
        "required": ["currency"],
        "properties": {
            "currency": {
              "$ref": "#/components/schemas/Currency"
            },
            "value": {
              "description": "Amounts of currency for both XRP and issued currencies.",
              "type": "string",
              "pattern": "([+-]?(^\\d(\\.\\d+)?[Ee][+-]?\\d+)$)|(^[0-9]+(\\.[0-9]{1,2})?$)"
            },
            "issuer": {
              "description": "Unique account address of the entity issuing the currency. In other words, the person or business where the currency can be redeemed.",
              "$ref": "#/components/schemas/Address"
            }
        }
      },
      "Book": {
        "type": "object",
        "description": "An order book",
        "required": ["taker_gets", "taker_pays", "taker"],
        "properties": {
          "taker_gets": {
            "description": "Specification of which currency the account taking the Offer would receive, as a currency object with no amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "taker_pays": {
            "description": "Specification of which currency the account taking the Offer would pay, as a currency object with no amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "taker": {
            "description": "Unique account address to use as a perspective for viewing offers, in the XRP Ledger's base58 format.",
            "$ref": "#/components/schemas/Address"
          },
          "snapshot": {
            "description": "If true, return the current state of the order book once when you subscribe before sending updates. The default is false.",
            "type": "boolean"
          },
          "both": {
            "description": "If true, return both sides of the order book. The default is false.",
            "type": "boolean"
          }
        }
      },
      "BookUnsubscribe": {
        "type": "object",
        "description": "An order book",
        "required": ["taker_gets", "taker_pays"],
        "properties": {
          "taker_gets": {
            "description": "Specification of which currency the account taking the Offer would receive, as a currency object with no amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "taker_pays": {
            "description": "Specification of which currency the account taking the Offer would pay, as a currency object with no amount.",
            "$ref": "#/components/schemas/CurrencyObject"
          },
          "both": {
            "description": "If true, return both sides of the order book. The default is false.",
            "type": "boolean"
          }
        }
      }
    },
    "contentDescriptors": {
      "Account": {
        "name": "account",
        "description": "The unique identifier of an account, typically the account's Address.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "LedgerHash": {
        "name": "ledger_hash",
        "description": "A 20-byte hex string for the ledger version to use.",
        "schema": {
          "type": "string",
          "pattern": "^[A-Fa-f0-9]{64}$"
        }
      },
      "LedgerIndex": {
        "name": "ledger_index",
        "description": "The ledger index of the ledger to use, or a shortcut string ('current', 'closed', or 'validated') to choose a ledger automatically.",
        "schema": {
          "oneOf": [
            { "type": "integer", "minimum": 0, "maximum": 4294967296 },
            { "type": "string", "enum": ["validated", "closed", "current"] }
          ]
        }
      },
      "Strict": {
        "name": "strict",
        "description": "If true, then the account field only accepts a public key or XRP Ledger address. Otherwise, account can be a secret or passphrase (not recommended). The default is false.",
        "schema": {
          "type": "boolean"
        }
      },
      "Limit": {
        "name": "limit",
        "description": "Limit the number of transactions to retrieve. Cannot be less than 10 or more than 400. The default is 200.",
        "schema": {
          "type": "integer",
          "minimum": 10,
          "maximum": 400
        }
      },
      "Marker": {
        "name": "marker",
        "description": "Value from a previous paginated response. Resume retrieving data where that response left off.",
        "schema": {
          "type": "object"
        }
      },
      "Transactions": {
        "name": "transactions",
        "description": "If true, return information on transactions in the specified ledger version. Defaults to false. Ignored if you did not specify a ledger version.",
        "schema": {
          "type": "boolean"
        }
      },
      "Binary": {
        "name": "binary",
        "description": "Return transaction information in binary format (hexadecimal string) instead of JSON format.",
        "schema": {
          "type": "boolean"
        }
      },
      "Queue": {
        "name": "queue",
        "description": "If true, and the command is requesting the current ledger, includes an array of queued transactions in the results.",
        "schema": {
          "type": "boolean"
        }
      },
      "Streams": {
        "name": "streams",
        "description": "Array of string names of generic streams to subscribe to.",
        "schema": {
          "type": "array", 
          "items": { 
            "type": "string", 
            "enum": ["server", "ledger", "transactions", "transactions_proposed", "validations", "conensus", "peer_status"] 
          }
        }
      },
      "Accounts": {
        "name": "accounts",
        "description": "Array with the unique addresses of accounts to monitor for validated transactions.",
        "schema": {
          "type": "array", 
          "items": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "AccountsProposed": {
        "name": "accounts_proposed",
        "description": "Array with the unique addresses of accounts to monitor for validated transactions, include transactions that are not yet finalized.",
        "schema": {
          "type": "array", 
          "items": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Books": {
        "name": "books",
        "description": "Array of objects defining order books to monitor for updates.",
        "schema": {
          "type": "array", 
          "items": { 
            "$ref": "#/components/schemas/Book"
          }
        }
      },
      "BooksUnsubscribe": {
        "name": "books",
        "description": "The objects in the books array are defined almost like the ones from subscribe, except that they don't have all the fields.",
        "schema": {
          "type": "array", 
          "items": { 
            "$ref": "#/components/schemas/BookUnsubscribe"
          }
        }
      }
    }
  }
}